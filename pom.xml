<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.github.rebue.common-pom</groupId>
	<artifactId>common-pom</artifactId>
	<version>1.1.0</version>
	<packaging>pom</packaging>
	<name>common-pom</name>
	<description>常用的pom.xml文件</description>
	<url>https://github.com/rebue/common-pom</url>

	<licenses>
		<license>
			<name>MIT License</name>
			<url>http://www.opensource.org/licenses/mit-license.php</url>
		</license>
	</licenses>

	<developers>
		<developer>
			<name>zhangbaizi</name>
			<email>nnzbz@163.com</email>
		</developer>
	</developers>

	<scm>
		<connection>scm:git:https://github.com/rebue/common-pom.git</connection>
		<developerConnection>scm:git:https://github.com/rebue/common-pom.git</developerConnection>
		<url>https://github.com/rebue/common-pom.git</url>
	</scm>

	<modules>
		<module>common-import</module>
		<module>common-dependencies</module>
		<module>rebue-import</module>
		<module>./common-dependencies/common-parent</module>
		<module>sb-dependencies</module>
		<module>./sb-dependencies/sb-parent</module>
	</modules>

	<properties>
		<!-- Maven的插件的版本 -->
		<maven-enforcer-plugin.version>3.0.0-M2</maven-enforcer-plugin.version>
		<dockerfile-maven-plugin.version>1.4.10</dockerfile-maven-plugin.version>

		<!-- JDK版本 -->
		<java.version>1.8</java.version>
		<maven.compiler.source>${java.version}</maven.compiler.source>
		<maven.compiler.target>${java.version}</maven.compiler.target>

		<!-- 使用UTF-8 -->
		<encoding>UTF-8</encoding>
		<!-- 设定整个项目的编码 -->
		<project.build.sourceEncoding>${encoding}</project.build.sourceEncoding>
		<!-- 编译时的编码 -->
		<maven.compiler.encoding>${encoding}</maven.compiler.encoding>
		<project.reporting.outputEncoding>${encoding}</project.reporting.outputEncoding>
		<argLine>-Dfile.encoding=${encoding}</argLine>
	</properties>

	<build>
		<resources>
			<resource>
				<directory>src/main/java</directory>
				<includes>
					<include>**/*.properties</include>
					<include>**/*.xml</include>
					<include>**/*.tld</include>
				</includes>
				<filtering>false</filtering>
			</resource>
		</resources>

		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>config/**</exclude>
						<exclude>static/**</exclude>
						<exclude>templates/**</exclude>
						<exclude>**/*.yml</exclude>
						<exclude>**/log4j2.xml</exclude>
					</excludes>
				</configuration>
			</plugin>

			<!-- enforcer插件, 避免被依赖的依赖引入过期的jar包 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
				<version>${maven-enforcer-plugin.version}</version>
				<!-- <dependencies> -->
				<!-- <dependency> -->
				<!-- <groupId>com.github.rebue.maven</groupId> -->
				<!-- <artifactId>enforcer-rulex</artifactId> -->
				<!-- <version>1.0.0-SNAPSHOT</version> -->
				<!-- </dependency> -->
				<!-- </dependencies> -->
				<executions>
					<execution>
						<id>enforce-banned-dependencies</id>
						<goals>
							<goal>enforce</goal>
						</goals>
						<configuration>
							<rules>
								<!-- <bannedDependenciesEx implementation="rebue.maven.enforcer.BannedDependenciesEx"> -->
								<bannedDependencies>
									<!-- 是否搜索传递性依赖(间接依赖)，默认false -->
									<searchTransitive>true</searchTransitive>
									<excludes>
										<!--groupId[:artifactId][:version][:type][:scope][:classifier] -->
										<exclude>commons-logging:commons-logging</exclude>
										<exclude>aspectj:aspectj*</exclude>
										<exclude>org.springframework:2.*</exclude>
										<exclude>org.springframework:3.*</exclude>
										<exclude>spring-boot-starter-logging</exclude>
										<exclude>hibernate-jpa-2.0-api</exclude>
									</excludes>
									<!-- <includes> -->
									<!-- 如果是spring-cloud-starter-eureka-server带的jcl则不用报错 -->
									<!-- <include>org.springframework.cloud:spring-cloud-starter-eureka-server->commons-logging:commons-logging</include> -->
									<!-- </includes> -->
								</bannedDependencies>
							</rules>
							<fail>true</fail>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- resource插件 -->
			<!-- <plugin> -->
			<!-- <groupId>org.apache.maven.plugins</groupId> -->
			<!-- <artifactId>maven-resources-plugin</artifactId> -->
			<!-- <configuration> -->
			<!-- 指定编码格式，否则在DOS下运行mvn命令时当发生文件资源copy时将使用系统默认使用GBK编码 -->
			<!-- <encoding>UTF-8</encoding> -->
			<!-- </configuration> -->
			<!-- </plugin> -->

			<!-- jar打包相关插件 -->
			<!-- <plugin> -->
			<!-- <groupId>org.apache.maven.plugins</groupId> -->
			<!-- <artifactId>maven-jar-plugin</artifactId> -->
			<!-- <configuration> -->
			<!-- <archive> -->
			<!-- <manifest> -->
			<!-- Spring注解自动扫描Jar中的类，以前在eclipse下，打包时需要选择Add directory entries选项，否则spring是不会扫描该jar的，在mavan下需要添加下面这行 -->
			<!-- <addDefaultImplementationEntries>true</addDefaultImplementationEntries> -->
			<!-- </manifest> -->
			<!-- </archive> -->
			<!-- </configuration> -->
			<!-- </plugin> -->
		</plugins>
		
		<pluginManagement>
			<plugins>
				<!-- 制作docker镜像的插件 -->
				<plugin>
					<groupId>com.spotify</groupId>
					<artifactId>dockerfile-maven-plugin</artifactId>
					<version>${dockerfile-maven-plugin.version}</version>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<profiles>
		<profile>
			<id>deploy-private</id>
			<!-- 部署私服 -->
			<distributionManagement>
				<snapshotRepository>
					<id>my-snapshots</id>
					<name>my-snapshots</name>
					<url>${my-snapshots.url}</url>
					<uniqueVersion>true</uniqueVersion>
				</snapshotRepository>
				<repository>
					<id>my-releases</id>
					<name>my-releases</name>
					<url>${my-releases.url}</url>
				</repository>
			</distributionManagement>
		</profile>

		<profile>
			<id>deploy-public</id>
			<!-- 部署中央仓库 -->
			<distributionManagement>
				<snapshotRepository>
					<id>oss</id>
					<url>https://oss.sonatype.org/content/repositories/snapshots/</url>
				</snapshotRepository>
				<repository>
					<id>oss</id>
					<url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
				</repository>
			</distributionManagement>

			<build>
				<plugins>
					<!-- 创建源码包 -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-source-plugin</artifactId>
						<executions>
							<execution>
								<phase>package</phase>
								<goals>
									<goal>jar-no-fork</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<!-- 创建文档包 -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-javadoc-plugin</artifactId>
						<version>3.0.1</version>
						<configuration>
							<!-- 不检查JavaDoc规范 -->
							<!-- <doclint>none</doclint> -->
							<!-- <additionalparam>-Xdoclint:none</additionalparam> -->
							<tags>
								<tag>
									<name>mbg.generated</name>
									<!-- todo tag for all places -->
									<placement>a</placement>
									<head>mybatis自动生成的代码</head>
								</tag>
							</tags>
						</configuration>
					</plugin>
					<!-- 部署时用GPG数字签名 -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-gpg-plugin</artifactId>
						<executions>
							<execution>
								<phase>verify</phase>
								<goals>
									<goal>sign</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>